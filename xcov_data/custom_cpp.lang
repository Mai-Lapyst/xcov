# definitions for C++

include "/usr/share/source-highlight/c_comment.lang"

#-------------------------------------------------------

# Changed: added namespace
(keyword,normal,classname) = 
  `(\<(?:enum|class|struct|typename|union|namespace))([[:blank:]]+)([[:alnum:]_]+)`

#-------------------------------------------------------

include "/usr/share/source-highlight/c_preprocessor.lang"

include "/usr/share/source-highlight/number.lang"

include "/usr/share/source-highlight/c_string.lang"

# Changed: removed 'namespace' to put into own rule
keyword = "__asm|__cdecl|__declspec|__export|__far16",
  "__fastcall|__fortran|__import",
  "__pascal|__rtti|__stdcall|_asm|_cdecl",
  "__except|_export|_far16|_fastcall",
  "__finally|_fortran|_import|_pascal|_stdcall|__thread|__try|asm|auto",
  "break|case|cdecl|const|continue|default",
  "do|else|enum|extern|for|goto",
  "if|pascal",
  "register|restrict|return|sizeof|static",
  "struct|switch",
  "typedef|union",
  "volatile|while",
  "catch|class|const_cast|constexpr|decltype|delete",
  "dynamic_cast|explicit|export|false|final|friend",
  "inline|mutable|new|noexcept|operator|override",
  "private|protected|public|reinterpret_cast|static_cast",
  "static_assert|template|this|throw|true",
  "try|typeid|typename",
  "using|virtual"

label = '^[[:blank:]]*[[:alnum:]]+:[[:blank:]]*\z'

type = "bool|char|double|float|int|long",
  "short|signed|unsigned|void|wchar_t",
  "char16_t|char32_t"

include "/usr/share/source-highlight/symbols.lang"

cbracket = "{|}"

#-------------------------------------------------------

# include "/usr/share/source-highlight/function.lang"

# Changed from function.lang by prefixing it so "XXX::YYY" geths highlighted as the function instead of only the function's name
vardef FUNCTION = '(([[:alpha:]]|_)[[:word:]]*::)*([[:alpha:]]|_)[[:word:]]*(?=[[:blank:]]*\()'
function = $FUNCTION

#-------------------------------------------------------

# include "/usr/share/source-highlight/clike_vardeclaration.lang"

# Changed from clike_vardeclaration.lang by adding the 'symbol' step so
# "Type* xxx" or "Type& xxx" is also correctly highlighted.
(usertype,symbol,usertype,normal) = 
`([[:alpha:]_](?:[^[:punct:][:space:]]|[_])*)
([*&]*)
((?:<.*>)?)
(\s+(?=[*&]*[[:alpha:]_][^[:punct:][:space:]]*\s*[[:punct:]\[\]]+))`